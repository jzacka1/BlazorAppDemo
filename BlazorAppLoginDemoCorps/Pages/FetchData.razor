@page "/fetchdata"

@using BlazorAppLoginDemoCorps.Data
@inject WeatherForecastService ForecastService
@inject IAuthorizationService AuthorizationService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<button @onclick="@DoSomething">Do something cool</button>
<h3>@fat</h3>

@if (forecasts == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Date</th>
				<th>Temp. (C)</th>
				<th>Temp. (F)</th>
				<th>Summary</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var forecast in forecasts)
			{
				<tr>
					<td>@forecast.Date.ToShortDateString()</td>
					<td>@forecast.TemperatureC</td>
					<td>@forecast.TemperatureF</td>
					<td>@forecast.Summary</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private WeatherForecast[] forecasts;

	protected override async Task OnInitializedAsync()
	{
		forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
	}

	//==================================================================

	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	public int fat;

	private async Task DoSomething()
	{
		var user = (await authenticationStateTask).User;

		if (user.Identity.IsAuthenticated)
		{
			// Perform an action only available to authenticated (signed-in) users.
			fat = 1;
		}

		if (user.IsInRole("admin"))
		{
			// Perform an action only available to users in the 'admin' role.
			fat = 2;
		}

		if ((await AuthorizationService.AuthorizeAsync(user, "content-editor"))
			.Succeeded)
		{
			// Perform an action only available to users satisfying the
			// 'content-editor' policy.

			fat = 4;
		}
	}
}
